// Code generated by go-swagger; DO NOT EDIT.

package signup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/wasimkhan042/ustore-auth/gen/models"
)

// SignupOKCode is the HTTP code returned for type SignupOK
const SignupOKCode int = 200

/*SignupOK Successful registeration

swagger:response signupOK
*/
type SignupOK struct {

	/*
	  In: Body
	*/
	Payload *models.SignUpResponse `json:"body,omitempty"`
}

// NewSignupOK creates SignupOK with default headers values
func NewSignupOK() *SignupOK {

	return &SignupOK{}
}

// WithPayload adds the payload to the signup o k response
func (o *SignupOK) WithPayload(payload *models.SignUpResponse) *SignupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the signup o k response
func (o *SignupOK) SetPayload(payload *models.SignUpResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignupBadRequestCode is the HTTP code returned for type SignupBadRequest
const SignupBadRequestCode int = 400

/*SignupBadRequest Bad Request

swagger:response signupBadRequest
*/
type SignupBadRequest struct {
}

// NewSignupBadRequest creates SignupBadRequest with default headers values
func NewSignupBadRequest() *SignupBadRequest {

	return &SignupBadRequest{}
}

// WriteResponse to the client
func (o *SignupBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// SignupNotFoundCode is the HTTP code returned for type SignupNotFound
const SignupNotFoundCode int = 404

/*SignupNotFound User not found

swagger:response signupNotFound
*/
type SignupNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSignupNotFound creates SignupNotFound with default headers values
func NewSignupNotFound() *SignupNotFound {

	return &SignupNotFound{}
}

// WithPayload adds the payload to the signup not found response
func (o *SignupNotFound) WithPayload(payload string) *SignupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the signup not found response
func (o *SignupNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SignupInternalServerErrorCode is the HTTP code returned for type SignupInternalServerError
const SignupInternalServerErrorCode int = 500

/*SignupInternalServerError Server error

swagger:response signupInternalServerError
*/
type SignupInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSignupInternalServerError creates SignupInternalServerError with default headers values
func NewSignupInternalServerError() *SignupInternalServerError {

	return &SignupInternalServerError{}
}

// WithPayload adds the payload to the signup internal server error response
func (o *SignupInternalServerError) WithPayload(payload string) *SignupInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the signup internal server error response
func (o *SignupInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignupInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
